name: Build and Release with Code Signing

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Debug - Environment info
        run: |
          echo "OS: ${{ runner.os }}"
          echo "Node: $(node -v)"
          echo "NPM: $(npm -v)"
          echo "Working directory: $(pwd)"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"

      - name: Install dependencies
        run: npm ci

      - name: Debug - Project structure before build
        run: |
          echo "Project structure:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            dir package.json
            type package.json | findstr /C:"\"build\":"
            dir
          else
            find . -type f -name "package.json" | xargs ls -la
            cat package.json | grep -A 50 "\"build\":"
            ls -la
          fi

      - name: Cache electron-builder cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      # Code signing setup for macOS
      - name: Set up macOS code signing
        if: matrix.os == 'macos-latest' && secrets.MACOS_CERTIFICATE
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain: build.keychain
          keychain-password: ${{ secrets.KEYCHAIN_PWD }}

      # Code signing setup for Windows
      - name: Set up Windows code signing
        if: matrix.os == 'windows-latest' && secrets.WINDOWS_CERTIFICATE
        uses: crazy-max/ghaction-import-pfx@v1
        with:
          pfx-base64: ${{ secrets.WINDOWS_CERTIFICATE }}
          pfx-password: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}

      - name: Build Vite app
        run: npm run build

      - name: Debug - Check dist directory after Vite build
        run: |
          echo "Dist directory contents:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            dir dist || echo "No dist directory found"
          else
            ls -la dist || echo "No dist directory found"
          fi

      - name: Build and package Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Running macOS packaging..."
          npm run package
          echo "Package result:"
          ls -la release-builds || echo "No release-builds directory found"
          find release-builds -type f -name "*.dmg" -o -name "*.zip" || echo "No macOS packages found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          NOTARIZE: ${{ secrets.NOTARIZE || 'false' }}

      - name: Build and package Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Running Windows packaging..."
          npm run package
          echo "Package result:"
          dir release-builds || echo "No release-builds directory found"
          dir /s /b release-builds\*.exe release-builds\*.msi release-builds\*.appx || echo "No Windows packages found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}

      - name: Build and package Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Running Linux packaging..."
          npm run package
          echo "Package result:"
          ls -la release-builds || echo "No release-builds directory found"
          find release-builds -type f -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" || echo "No Linux packages found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug - List all output files
        run: |
          echo "All potential release files:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            dir /s /b release-builds || echo "No files found in release-builds"
          else
            find . -type f -path "*/release-builds/*" || echo "No files found in release-builds"
          fi

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: release-builds/*.{dmg,zip}
          if-no-files-found: warn

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: release-builds/*.{exe,msi,appx}
          if-no-files-found: warn

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: release-builds/*.{AppImage,deb,rpm}
          if-no-files-found: warn

      - name: Debug - Before release
        run: |
          echo "Current directory before release:"
          pwd
          echo "Files that will be included in release:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            dir release-builds || echo "No release-builds directory found"
          else
            ls -la release-builds || echo "No release-builds directory found"
          fi

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release-builds/**
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
